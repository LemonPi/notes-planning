-----------------------------------------------------------
    Overview
-----------------------------------------------------------
- avoid explicit construction of Cobs
	- probe C-space with a sampling scheme
- black-box collision detection module
	- develop planning algorithms independent of geometric models
- give up completeness
	- instead go for weaker notions
	- denseness is important
		- samples come arbitrariliy close to any configuration as iteration -> inf
		- deterministic dense sampling leads to resolution complete
		- random sampling is dense with probability 1
			- probabilistically complete
				- with enough points solution converges to 1
				- important is the !rate of convergence!

-----------------------------------------------------------
    C-Space distance and volume
-----------------------------------------------------------
- almost all algorithms need a measure of distance between 2 points in C
	- results in a metric space
- also important to define the volume of a subset of C
	- results in a measure space
- use invariant measures whenever possible

-----------------------------------------------------------
    Metric spaces
-----------------------------------------------------------
- (X,p) topological space X with function p : X x X -> R
	- nonnegativity
	- reflexivity
		- p(a,b) = 0 iff a = b
	- symmetry
	- triangle inequality
- Lp metrics are homeomorphic to norms on vector spaces
- any subspace Y in X becomes a metric space if you restric p's domain to Y x Y
	- means can use provided metrics on manifolds
- extension across cartesian products (X,px) and (Y,py)
	- Z = X x Y
	- pz(z,z') = pz([x,y],[x',y']) = c1*px(x,x') + c2*py(y,y')
		- c1 > 0 and c2 > 0
	- can also apply a p-1/p power to the combination
eg. SO(2) using complex numbers with any Lp metric from R2
	- takes shortcut by computing length of line segment connecting 2 points
	- actually a distortion
eg. SO(2) by comparing angles
	- p(t1,t2) = min(|t1-t2|, 2*pi - |t1-t2|)
		- t in [0,2pi]
	- equivalently the angle between 2 vectors
		- p((a1,b1), (a2,b2)) = cos-1(a1*a2 + b1*b2)
eg. SO(3) using quaterions
	- live in S3 from R4
		- can use Lp metric except for antipodal points (h = -h)
	- p(h1,h2) = min(||h1 - h2||, ||h1 + h2||)
		- difference of h1 to both h2 and -h2
		- ||.|| is any norm
	- similar problem to before of travelling inside S3 distortion
eg. SO(3) using quaterions "angle" between
	- extension of SO(2) angle comparison
	- for unit vector in Rn v1*v2 = cos(theta)
	- ps(h1,h2) = cos-1(a1*a2 + b1*b2 + c1*c2 + d1*d2)
		- with identification of h = -h
		- p(h1,h2) = min(ps(h1,h2), ps(h1,-h2))
- pseudometric for behaviour similar to a metric
	- may break symmetry, for example for travelling up/down a hill
	eg. potential function

-----------------------------------------------------------
    Measure theory basics
-----------------------------------------------------------
- a measure is a function producing real values for subsets of a metric space
	- ideally nonnegative value
- due to Banach-Tarski paradox, need conditions on a collection B of subsets to avoid paradox a #sigma algebra#
	1. includes empty set
	2. if C is in B, then X \ C also in B
	3. for any collection of a countable number of sets in B, their union must also be in B
	- elements in B are called the mesurable sets
eg. a nice sigma algebra, the Borrel sets
	- for any metric space (X,p), B(x,r) = {x' in X | p(x,x') < r} open balls
	- sets that can be constructed from these open balls using sigma algebra axioms
	- such as an open square in R2
		- can be constructed as the union of a countable number of balls
- a #measure# is then defined as a function u : B -> [0,inf] such that
	1. u(empty set) = 0
	2. for E1,E2,... countably number of pairwise disjoint measureable sets, u(union of Es) = sum u(Ei) 
eg. Lebesgue measure
- can be used to define general notions of integration
- #Haar measure# is good for some transformation groups including SO(N)
	- G represents a matrix group with real entries
	- for any measurable subset A in G and any element g in G
		- u(A) = u(gA) = u(Ag)

-----------------------------------------------------------
    Sampling theory
-----------------------------------------------------------
- C is uncountably infinite
	- sampling algo can only consider a countable number of samples
	- so sampling order is critical: a difference between a sample set and sample sequence
- for U,V subsets of a topological space, U is #dense# in V if cl(U) = V
	- closure/adding boundary points to U produces U
	eg. (0,1) in R is dense in [0,1] in R
	eg. Q is dense in R
	- sequence is dense if the underlying set is dense
- a random sequence is probably dense
- van der Corput sequence is guaranteed to be dense
	- only defined for the unit interval
	- let C = [0,1]/~ where 0 ~ 1
	- reverse bits in binary representation
	- most significant bit toggles in every step
		- v(i) lies far away from v(i+1)
- random sampling must be over a probability density corresponding to the Haar measure
	eg. for C in Rm, can just sample each dimension uniformly
	eg. for SO(3) need to uniformly sample unit quaternions or S3
- low dispersion sampling is an alternative to random sampling
	- optimize the #dispersion# criterion
		- finite set P in a metric space (X,p)
		- d(P) = sup{x in X} min{q in P} p(x,q)
		- want low d(P)
	- place samples to make the largest uncovered area as small as possible
	- optimal placement in [0,1]^d is according to a Sukharev grid (regular grid...) for p = Linf
		- achieves d(P) = 1/(2*floor(k^1/d)) for k samples in dimension d
		- is a lower bound on achievable dispersion
	- considered Linf instead of L2 because L2 is very hard outside of R2
	- can use generalized van der Corput method for partial sampling if number of samples k is not known
		- for n dimensional spaces, use n bits at a time
- low #discrepency# sampling is another alternative
	- avoids alignment due to grids having unexpected behaviour
		- drives variance up
	- D(P,R) = sup{R in R} ||P int R|/k - u(R)/u(X)|
		- X is a measure space
		- R collection of subsets of X called the range space
			- usually set of all axis-aligned rectangular subsets
		- P is a particular point set
		- want equal point/number of elements and measure ratio
	- d(P,Linf) <= D(P,R)^1/d
		- !low discrepency -> low dispersion!
		- converse not true
	- can use Halton/Hammersley sampling or lattices


-----------------------------------------------------------
    Collision detection
-----------------------------------------------------------
- distance function beteween sets is the min distance over all point pairs
- with robots often split into 2 phases
	- robot is a collection of m links A1..Am
	- O has k connected components
	1. broad phase
		- avoid expensive computation
		- use simple bounding boxes to find what can't possibly be overlapping/colliding
	2. narrow phase
		- individual pairs of bodies checked for collision
		- each body is a subset of R2 or R3
			- defined using some primitives
				eg. triangles in R3
		- hierarchical methods
			- decompose each body into a tree
				- each vertex is abounding region containing a subset of the body
				- bounding region of root vertex contains the whole body
			- bounding region type has a tradeoff
				- tight fit
				- efficient intersection test
				- in order of decreasing efficiency but tighter fit:
					1. sphere
					2. axis-aligned bounding box (AABB)
					3. oriented bounding box (OBB)
					4. convex hull
			- recursively generate vertices by binary partition
			- test collision by recursively decomposing one tree
				- if tested at no collision at any level then no collision possible
				- if tested for collision decompose one of the colliding boxes into two and test those against the other 1
		- incremental methods
			- assume continuous calls to collision detection
				- bodies move only a small amount
				- achieves almost constant time for convex polyhedral bodies
			- requires coherent models
				- bodies in R2 have to be polygons and bodies in R3 have to be polyhedra
					- cannot be lower dimensional such as an isolated line segment in R2
			- consider Voronoi regions of features
				- in R2 features are edges and vertices
				- in R3 features also include faces
				- each feature has a corresponding Voronoi region
			- for 2 convex bodies consider any 2 features F1 and F2
				- the distance between the closest point pair in those is the distance between the bodies
				- our assumption of incremental motion means F1 and F2 are likely the same across frames
					- neighbouring features also tested for if the cloest feature pair changed
- API to collision checking usually takes a path as input, not just a configuration
	- path T:[0,1] -> C needs to all be not in collision
	- common approach is to sample interval [0,1] and test on samples
		- practically choose a fixed dq > 0 as C-space step size
			- then choose dt such that distance(T(t), T(t+dt)) <= dq
			- determine dq experimentally
				- too small means wasting time
				- too large means chance of jumping through a thin obstacle
		- also exists algorithmic ways to verify collision-free
			- consider max distance any point could've moved
				eg. in 2D rotation it's r|theta - theta'|
					- also consider translation, so together we require |x-x'| + |y-y'| + r|theta-theta'| < d
						- d is the closest distance between those bodies between t and t'
		- for multijoints have to select step sizes for each joint separately
			- also good to bound step size around q in C
				- analyze the Jacobian of the transformations
		- best to take recursive binary strategy rather than linear along [0,1]

-----------------------------------------------------------
    Incremental sampling and searching
-----------------------------------------------------------
- single query model
- similar to search but instead of applying an action we generate a path segment
	- edges represent paths rather than actions
- most single query algos follow template:
	1. initialize
		- G(V,E) undirected search graph
		- V at least 1 vertex
			- typically qi and qg
		- E no edges
	2. #vertex selection method (VSM)#
		- choose a vertex in V for expansion
	3. #local planning method (LPM)#
		- for some qnew in Cfree construct path Ts:[0,1] -> Cfree such that T(0) = qcur and T(1) = qnew
		- if path cannot be constructed go to step 2
	4. insert edge in graph
		- insert Ts in E as an edge from qcur to qnew
		- insert qnew in V if necessary
	5. check for a solution
		- determine if G encodes a solution path
	6. return to step 2
- each vertex is a configuration
- each edge is a path connecting two configurations
- variation in algos come from steps 2 and 3
- use bidirectional search for bug traps
- randomized potential fields
	- simple method that scales up to 31 dof
	- not used anymore due to parameter tuning
	- do best first search and randomly walk if at local minima
		- if random walk after K tries still can't escape backtrack to a random walked to node
	- smooth path after
		- iteratively pick random pairs of points and replace segment with straight line
			- check for collision

-----------------------------------------------------------
    Rapidly exploring dense trees
-----------------------------------------------------------
- incremental sampling/searching with good performance and no resolution parameters
- RRT
	- called RDTs to indicate a dense covering of the space
- iteratively add vertices from a dense sequence
	- sequence such as random, Halton, Hammersley, ...
- important step is to connect the added vertex to the closest other vertex
	- k-d tree
		- scales well up to about 20 dim
