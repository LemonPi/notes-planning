-----------------------------------------------------------
    Geometric Modelling
-----------------------------------------------------------
- represent robots and obstacles
- usually 2 choices
	1. boundary
	2. solid
- assume either 2D or 3D world: W = R2 OR W = R3
- represent using a collection of primitives
	- closed subsets of W
- O is the obstacle region
	- all points in W that lie in one or more objects

-----------------------------------------------------------
    Obstacle Polygons (2D)
-----------------------------------------------------------
- a convex m-sided polygon can be represented as
	1. sequence of m points defining corners
	2. intersection of m half-planes
		- each half plane is all points on one side of a line
		- edge of a polygon is specified by (x1,y1), (x2,y2)
		- equation f(x,y) = ax + by + c
			- f(x,y) = 0 along edge
			- f(x,y) < 0 on one side
		- let fi(x,y) is the edge from (xi,yi) to (xi+1,yi+1)
		- half plane is then Hi = {(x,y) in W | fi(x,y) <= 0}
		- O = H1 intersect H2 ... intersect Hm
- form nonconvex polygons with unions of convex polygons
	- minimizing number of primitives is NP-hard
	- instead use vertical cell decomposition
- remove obstacles without using set difference
	- want to remove Hi <-> fi(x,y) < 0
	- keep points -f(x,y) <= 0
	- union new primitive
- test collision
	- let e(x,y) be TRUE if f(x,y) <= 0
	- for being in a single obstacle
		- e1(x,y) and e2(x,y) .. em(x,y) is TRUE